<?xml version="1.0"?>
<doc>
    <assembly>
        "CefSharp.Core"
    </assembly>
    <members>
        <member name="P:CefSharp.SchemeHandlerResponse.CloseStream">
            <summary>
Set to true to close the response stream once it has been read. The default value
is false in order to preserve the old CefSharp behavior of not closing the stream.
</summary>
        </member>
        <member name="P:CefSharp.SchemeHandlerResponse.RedirectUrl">
            <summary>
URL to redirect to (leave empty to not redirect).
</summary>
        </member>
        <member name="P:CefSharp.SchemeHandlerResponse.ContentLength">
            <summary>
The length of the response contents. Defaults to -1, which means unknown length
and causes CefSharp to read the response stream in pieces. Thus, setting a length
is optional but allows for more optimal response reading.
</summary>
        </member>
        <member name="P:CefSharp.SchemeHandlerResponse.StatusCode">
            <summary>
The status code of the response. Unless set, the default value used is 200
(corresponding to HTTP status OK).
</summary>
        </member>
        <member name="P:CefSharp.SchemeHandlerResponse.ResponseStream">
            <summary>
A Stream with the response data. If the request didn't return any response, leave this property as null.
</summary>
        </member>
        <member name="M:CefSharp.TypeUtils.ConvertFromCef(CefRefPtr&lt;CefV8Value&gt;)">
            <summary>
Converts a Chromium V8 value to a (managed) .NET object.
</summary>
            <param name="obj">The V8 value that should be converted.</param>
            <returns>A corresponding .NET object.</returns>
        </member>
        <member name="M:CefSharp.TypeUtils.ConvertToCef(System.Object,System.Type)">
            <summary>
Converts a .NET object to an (unmanaged) Chromium V8 object.
</summary>
            <param name="obj">The .NET object that should be converted.</param>
            <param name="type">The type of the source object. If this parameter is a null reference, the type will be determined
automatically.</param>
            <returns>A corresponding V8 value.</returns>
        </member>
        <member name="M:CefSharp.Cef.Shutdown">
            <summary>Shuts down CefSharp and the underlying CEF infrastructure. This method is safe to call multiple times; it will only
shut down CEF on the first call (all subsequent calls will be ignored).
</summary>
        </member>
        <member name="M:CefSharp.Cef.FlushStore(CefSharp.ICompletionHandler)">
            <summary> Flush the backing store (if any) to disk and execute the specified |handler| on the IO thread when done. Returns </summary>
            <param name="handler">A user-provided ICompletionHandler implementation.</param>
            <return>Returns false if cookies cannot be accessed.</return>
        </member>
        <member name="M:CefSharp.Cef.SetCookiePath(System.String,System.Boolean)">
            <summary> Sets the directory path that will be used for storing cookie data. If <paramref name="path" /> is empty data will be stored in 
memory only. Otherwise, data will be stored at the specified path. To persist session cookies (cookies without an expiry 
date or validity interval) set <paramref name="persistSessionCookies" /> to true. Session cookies are generally intended to be transient and 
most Web browsers do not persist them.</summary>
            <param name="path">The file path to write cookies to.</param>
            <param name="persistSessionCookies">A flag that determines whether session cookies will be persisted or not.</param>
            <return> false if a non-empty invalid URL is specified, or if the CookieManager is not available; otherwise, true.</return>
        </member>
        <member name="M:CefSharp.Cef.DeleteCookies(System.String,System.String)">
            <summary>Deletes all cookies that matches all the provided parameters. If both <paramref name="url" /> and <paramref name="name" /> are empty, all cookies will be deleted.</summary>
            <param name="url">The cookie URL. If an empty string is provided, any URL will be matched.</param>
            <param name="name">The name of the cookie. If an empty string is provided, any URL will be matched.</param>
            <return>false if a non-empty invalid URL is specified, or if cookies cannot be accessed; otherwise, true.</return>
        </member>
        <member name="M:CefSharp.Cef.SetCookie(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>Sets a cookie using mostly default parameters. This function expects each attribute to be well-formed. It will check for disallowed
characters (e.g. the ';' character is disallowed within the cookie value attribute) and will return false without setting
the cookie if such characters are found.</summary>
            <param name="url">The cookie URL</param>
            <param name="name">The cookie name.</param>
            <param name="value">The cookie value.</param>
            <param name="domain">The cookie domain.</param>
            <param name="expires">The DateTime when the cookie will be treated as expired.</param>
            <return>false if the cookie cannot be set (e.g. if illegal charecters such as ';' are used); otherwise true.</return>
        </member>
        <member name="M:CefSharp.Cef.SetCookie(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.DateTime)">
            <summary>Sets a CefSharp Cookie. This function expects each attribute to be well-formed. It will check for disallowed
characters (e.g. the ';' character is disallowed within the cookie value attribute) and will return false without setting
the cookie if such characters are found.</summary>
            <param name="url">The cookie URL</param>
            <param name="name">The cookie name</param>
            <param name="value">The cookie value</param>
            <param name="domain">The cookie domain</param>
            <param name="path">The cookie path</param>
            <param name="secure">A flag that determines whether the cookie will be marked as "secure" (i.e. its scope is limited to secure channels, typically HTTPS).</param>
            <param name="httponly">A flag that determines whether the cookie will be marked as HTTP Only (i.e. the cookie is inaccessible to client-side scripts).</param>
            <param name="has_expires">A flag that determines whether the cookie has an expiration date. Must be set to true when the "expires" parameter is provided.</param>
            <param name="expires">The DateTime when the cookie will be treated as expired. Will only be taken into account if the "has_expires" is set to true.</param>
            <return>false if the cookie cannot be set (e.g. if illegal charecters such as ';' are used); otherwise true.</return>
        </member>
        <member name="M:CefSharp.Cef.VisitUrlCookies(System.String,System.Boolean,CefSharp.ICookieVisitor)">
            <summary>Visits a subset of the cookies. The results are filtered by the given url scheme, host, domain and path. 
If <paramref name="includeHttpOnly" /> is true, HTTP-only cookies will also be included in the results. The returned cookies 
are sorted by longest path, then by earliest creation date.</summary>
            <param name="url">The URL to use for filtering a subset of the cookies available.</param>
            <param name="includeHttpOnly">A flag that determines whether HTTP-only cookies will be shown in results.</param>
            <param name="visitor">A user-provided Cookie Visitor implementation.</param>
            <return>Returns false if the CookieManager is not available; otherwise, true.</return>
        </member>
        <member name="M:CefSharp.Cef.VisitAllCookies(CefSharp.ICookieVisitor)">
            <summary>Visits all cookies using the provided Cookie Visitor. The returned cookies are sorted by longest path, then by earliest creation date.</summary>
            <param name="visitor">A user-provided Cookie Visitor implementation.</param>
            <return>Returns false if the CookieManager is not available; otherwise, true.</return>
        </member>
        <member name="M:CefSharp.Cef.RegisterJsObject(System.String,System.Object)">
            <summary>Binds a C# class to a JavaScript object.</summary>
            <param name="name">The name for the new object in the JavaScript engine (e.g. 'foo' for an object accessible as 'foo' or 'window.foo').</param>
            <param name="objectToBind">The .NET object to bind.</param>
            <return>Always returns true.</return>
        </member>
        <member name="M:CefSharp.Cef.Initialize(CefSharp.CefSettings)">
            <summary>Initializes CefSharp with user-provided settings.</summary>
            <param name="cefSettings">CefSharp configuration settings.</param>
            <return>true if successful; otherwise, false.</return>
        </member>
        <member name="M:CefSharp.Cef.Initialize">
            <summary>Initializes CefSharp with the default settings.</summary>
            <return>true if successful; otherwise, false.</return>
        </member>
        <member name="P:CefSharp.Cef.ChromiumVersion">
            <summary>Gets a value that indicates the Chromium version currently being used.</summary>
            <value>The Chromium version.</value>
        </member>
        <member name="P:CefSharp.Cef.CefVersion">
            <summary>Gets a value that indicates the CEF version currently being used.</summary>
            <value>The CEF Version</value>
        </member>
        <member name="P:CefSharp.Cef.CefSharpVersion">
            <summary>Gets a value that indicates the version of CefSharp currently being used.</summary>
            <value>The CefSharp version.</value>
        </member>
        <member name="P:CefSharp.Cef.IsInitialized">
            <summary>Gets a value that indicates whether CefSharp is initialized.</summary>
            <value>true if CefSharp is initalized; otherwise, false.</value>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.AssignNativeFromClr(_cef_string_utf16_t*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String)">
            <summary>
Assigns the provided cef_string_t object from the given .NET string.
</summary>
            <param name="cefStr">The cef_string_t that should be updated.</param>
            <param name="str">The .NET string whose value should be used to update cefStr.</param>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToNative(System.Collections.Generic.List`1{System.String})">
            <summary>
Converts a .NET List of strings to native (unmanaged) format.
</summary>
            <param name="str">The List of strings that should be converted.</param>
            <returns>An unmanaged representation of the provided List of strings, or an empty List if the input is a nullptr.</returns>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToNative(System.String)">
            <summary>
Converts a .NET string to native (unmanaged) format. Note that this method does not allocate a new copy of the
</summary>
            <param name="str">The string that should be converted.</param>
            <returns>An unmanaged representation of the provided string, or an empty string if the input string is a nullptr.</returns>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToClr(std.vector&lt;CefStringBase&lt;CefStringTraitsUTF16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts an unmanaged vector of strings to a (managed) .NET List of strings.
</summary>
            <param name="cefStr">The vector of strings that should be converted.</param>
            <returns>A .NET List of strings.</returns>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToClr(CefStringBase&lt;CefStringTraitsUTF16&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts an unmanaged string to a (managed) .NET string.
</summary>
            <param name="cefStr">The string that should be converted.</param>
            <returns>A .NET string.</returns>
        </member>
        <member name="M:CefSharp.Internals.StringUtils.ToClr(_cef_string_utf16_t!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts an unmanaged string to a (managed) .NET string.
</summary>
            <param name="cefStr">The string that should be converted.</param>
            <returns>A .NET string.</returns>
        </member>
    </members>
</doc>